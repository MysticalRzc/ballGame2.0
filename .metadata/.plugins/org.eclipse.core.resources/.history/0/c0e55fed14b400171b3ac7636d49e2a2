package messageBuffer;

import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Queue;

public class MessageBuffer {
	final private Map<String, Queue> messBuffer = new HashMap<String, Queue>();
	final private Queue<String> mesIdQue = new LinkedList<String>();
	private MessageArouse messArouse;

	public MessageBuffer(MessageArouse messArouse) {
		this.messArouse = messArouse;
	}

	public int getSize() {
		return messBuffer.size();
	}

	public void messageListener()
	{
		Thread mesListener = new Thread(){
			@Override
			public void run()
			{
				synchronized (mesIdQue) {
					while(true)
					{
						if(!mesIdQue.isEmpty())
						{
							messArouse.Arouse(mesIdQue.poll());
						} else
							try {
								mesIdQue.wait();
							} catch (InterruptedException e) {
								e.printStackTrace();
							}
					}
				}
			}
		};
	}

	public void setMessage(String mesId, String message) {
		System.out.println("MessageBuffer receive£º " + message);
		if (!messBuffer.containsKey(mesId)) {
			messBuffer.put(mesId, new LinkedList<String>());
		}
		mesIdQue.add(mesId);
		messBuffer.get(mesId).add(message);
	}

	public String getMessage(String mesId) {
		String message;

		if (!messBuffer.containsKey(mesId))
			return null;
		message = (String) messBuffer.get(mesId).poll();
		return message;
	}

}